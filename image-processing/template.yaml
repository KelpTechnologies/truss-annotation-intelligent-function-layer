AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Image processing Lambda function and DynamoDB table"

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: Deployment stage (dev/prod)
  FunctionName:
    Type: String
    Description: Name of the image processing Lambda function
  CodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda deployment package
  CodeS3Key:
    Type: String
    Description: S3 key of the Lambda deployment package
  SourceBucketName:
    Type: String
    Description: Name of the existing source S3 bucket
  ProcessedBucketName:
    Type: String
    Description: Name of the existing processed S3 bucket

Resources:
  # DynamoDB table for processing status
  ProcessingStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "truss-image-processing-${StageName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: processingId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: processingId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # IAM Role for Lambda function
  ImageProcessingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "truss-image-processing-role-${StageName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !Sub "${SourceBucketName}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub "${ProcessedBucketName}/*"
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ProcessingStatusTable.Arn

  # Lambda function for image processing
  ImageProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt ImageProcessingRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          STAGE: !Ref StageName
          SOURCE_BUCKET: !Ref SourceBucketName
          PROCESSED_BUCKET: !Ref ProcessedBucketName
          PROCESSING_TABLE: !Ref ProcessingStatusTable
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:truss-toolkit-nodejs-layer:194"

  # Lambda permission for S3 to invoke the function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageProcessingLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "${SourceBucketName}/*"

Outputs:
  ProcessingTableName:
    Description: "Name of the processing status DynamoDB table"
    Value: !Ref ProcessingStatusTable
    Export:
      Name: !Sub "${AWS::StackName}-ProcessingTableName"

  LambdaFunctionArn:
    Description: "ARN of the image processing Lambda function"
    Value: !GetAtt ImageProcessingLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  LambdaFunctionName:
    Description: "Name of the image processing Lambda function"
    Value: !Ref ImageProcessingLambda
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"
