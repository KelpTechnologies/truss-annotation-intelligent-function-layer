name: Deploy Image Processing Infrastructure

on:
  push:
    branches: [main, dev]
    paths:
      - "image-processing/**"
      - "services/image-service/**"
      - ".github/workflows/deploy-image-processing.yaml"
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      stage: ${{ steps.set-stage.outputs.stage }}
    steps:
      - name: Set deployment stage
        id: set-stage
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "stage=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "stage=dev" >> $GITHUB_OUTPUT
          else
            echo "stage=dev" >> $GITHUB_OUTPUT
          fi

  deploy-image-processing-infrastructure:
    needs: set-environment
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ needs.set-environment.outputs.stage }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Package Image Processing Lambda
        run: |
          echo "📦 Packaging image processing Lambda for stage: ${STAGE}"

          cd image-processing

          # Install dependencies
          npm install --production

          # Create deployment package
          PACKAGE_NAME="image-processing-${STAGE}-$(date +%s).zip"
          zip -r "../${PACKAGE_NAME}" . -x "*.git*" "node_modules/.cache/*" "*.md"

          cd ..

          # Upload to S3
          S3_BUCKET="truss-api-automated-deployments"
          S3_KEY="lambda-packages/${PACKAGE_NAME}"

          echo "☁️  Uploading package to S3: s3://${S3_BUCKET}/${S3_KEY}"
          aws s3 cp "${PACKAGE_NAME}" "s3://${S3_BUCKET}/${S3_KEY}"

          # Store package info for deployment
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV
          echo "S3_KEY=${S3_KEY}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV

          # Clean up local package
          rm "${PACKAGE_NAME}"

          echo "✅ Image processing Lambda packaged and uploaded"

      - name: Deploy Image Processing Infrastructure
        run: |
          echo "🚀 Deploying image processing infrastructure for stage: ${STAGE}"

          STACK_NAME="truss-image-processing-${STAGE}"
          FUNCTION_NAME="truss-image-processing-${STAGE}"

          aws cloudformation deploy \
            --stack-name "${STACK_NAME}" \
            --template-file image-processing/template.yaml \
            --parameter-overrides \
              StageName=${STAGE} \
              FunctionName=${FUNCTION_NAME} \
              CodeS3Bucket=${S3_BUCKET} \
              CodeS3Key=${S3_KEY} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

          echo "✅ Image processing infrastructure deployed successfully"

      - name: Get Infrastructure Outputs
        id: get-outputs
        run: |
          echo "🔍 Getting infrastructure outputs..."

          STACK_NAME="truss-image-processing-${STAGE}"

          SOURCE_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='SourceBucketName'].OutputValue" \
            --output text)

          PROCESSED_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='ProcessedBucketName'].OutputValue" \
            --output text)

          PROCESSED_BUCKET_URL=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='ProcessedBucketUrl'].OutputValue" \
            --output text)

          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontUrl'].OutputValue" \
            --output text)

          PROCESSING_TABLE=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='ProcessingTableName'].OutputValue" \
            --output text)

          LAMBDA_FUNCTION_ARN=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_NAME}" \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionArn'].OutputValue" \
            --output text)

          echo "source_bucket=${SOURCE_BUCKET}" >> $GITHUB_OUTPUT
          echo "processed_bucket=${PROCESSED_BUCKET}" >> $GITHUB_OUTPUT
          echo "processed_bucket_url=${PROCESSED_BUCKET_URL}" >> $GITHUB_OUTPUT
          echo "cloudfront_url=${CLOUDFRONT_URL}" >> $GITHUB_OUTPUT
          echo "processing_table=${PROCESSING_TABLE}" >> $GITHUB_OUTPUT
          echo "lambda_function_arn=${LAMBDA_FUNCTION_ARN}" >> $GITHUB_OUTPUT

          echo "✅ Infrastructure outputs retrieved:"
          echo "   Source Bucket: ${SOURCE_BUCKET}"
          echo "   Processed Bucket: ${PROCESSED_BUCKET}"
          echo "   CloudFront URL: ${CLOUDFRONT_URL}"
          echo "   Processing Table: ${PROCESSING_TABLE}"

  configure-s3-notifications:
    needs: [set-environment, deploy-image-processing-infrastructure]
    runs-on: ubuntu-latest
    env:
      STAGE: ${{ needs.set-environment.outputs.stage }}
      SOURCE_BUCKET: ${{ needs.deploy-image-processing-infrastructure.outputs.source_bucket }}
      PROCESSING_LAMBDA: ${{ needs.deploy-image-processing-infrastructure.outputs.lambda_function_arn }}
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure S3 bucket notifications
        run: |
          echo "🔧 Configuring S3 bucket notifications for image processing..."

          # Configure S3 bucket notification to trigger Lambda on image upload
          aws s3api put-bucket-notification-configuration \
            --bucket "${SOURCE_BUCKET}" \
            --notification-configuration '{
              "LambdaConfigurations": [
                {
                  "Id": "ImageProcessingTrigger",
                  "LambdaFunctionArn": "'${PROCESSING_LAMBDA}'",
                  "Events": ["s3:ObjectCreated:*"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {
                          "Name": "suffix",
                          "Value": ".jpg"
                        },
                        {
                          "Name": "suffix", 
                          "Value": ".jpeg"
                        },
                        {
                          "Name": "suffix",
                          "Value": ".png"
                        },
                        {
                          "Name": "suffix",
                          "Value": ".webp"
                        },
                        {
                          "Name": "suffix",
                          "Value": ".gif"
                        }
                      ]
                    }
                  }
                }
              ]
            }'

          echo "✅ S3 bucket notifications configured successfully"

  deployment-summary:
    needs:
      [
        set-environment,
        deploy-image-processing-infrastructure,
        configure-s3-notifications,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "🎉 Image Processing Infrastructure Deployment Complete!"
          echo "════════════════════════════════════════════════════════════════"
          echo "📍 Stage: ${{ needs.set-environment.outputs.stage }}"
          echo ""
          echo "📊 Infrastructure Summary:"
          echo "   - Source S3 Bucket: ${{ needs.deploy-image-processing-infrastructure.outputs.source_bucket }}"
          echo "   - Processed S3 Bucket: ${{ needs.deploy-image-processing-infrastructure.outputs.processed_bucket }}"
          echo "   - CloudFront URL: ${{ needs.deploy-image-processing-infrastructure.outputs.cloudfront_url }}"
          echo "   - Processing Table: ${{ needs.deploy-image-processing-infrastructure.outputs.processing_table }}"
          echo ""
          echo "🚀 Image Processing Workflow:"
          echo "   1. Upload image to S3 source bucket"
          echo "   2. S3 event triggers image processing Lambda"
          echo "   3. Processed images stored in processed bucket"
          echo "   4. Access processed images via CloudFront URL"
          echo ""
          echo "📝 Next Steps:"
          echo "   - Deploy image service using: Deploy Services workflow"
          echo "   - Update API Gateway using: Deploy API Gateway workflow"
          echo ""
          echo "✅ Infrastructure components deployed successfully!"

  notify-deployment:
    needs:
      [
        set-environment,
        deploy-image-processing-infrastructure,
        configure-s3-notifications,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-image-processing-infrastructure.result }}" == "success" && "${{ needs.configure-s3-notifications.result }}" == "success" ]]; then
            echo "✅ Image Processing Infrastructure deployment successful for stage: ${{ needs.set-environment.outputs.stage }}"
          else
            echo "❌ Image Processing Infrastructure deployment failed for stage: ${{ needs.set-environment.outputs.stage }}"
            echo "Infrastructure: ${{ needs.deploy-image-processing-infrastructure.result }}"
            echo "S3 Notifications: ${{ needs.configure-s3-notifications.result }}"
            exit 1
          fi
